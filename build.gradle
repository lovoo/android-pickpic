// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.4.10'
    ext.multidex_version = "2.0.1"

    ext.legacy_v4_version = "1.0.0"
    ext.app_compat_version = "1.1.0"
    ext.material_version = "1.2.0-alpha06"
    ext.vector_drawable_version = "1.0.0"
    ext.constraint_layout_version = '1.1.3'
    ext.recycler_view_version = "1.1.0"
    ext.card_view_version = "1.0.0"
    ext.browser_version = "1.2.0"
    ext.exif_version = "1.2.0"
    ext.media_version = "1.1.0"
    ext.arch_version = "2.2.0"
    ext.arch_worker_version = "2.7.1"
    ext.lifecycle_version = "2.2.0"

    ext.rx_java_version = '2.2.15'
    ext.rx_android_version = '2.1.1'
    ext.glide_version = '4.11.0'
    ext.gson_version = '2.8.6'
    ext.facebook_version = '5.11.2'

    ext.espresso_version = "3.2.0"
    ext.uiautomator_version = "2.2.0"
    ext.orchestrator_version = "1.2.0"
    ext.androidX_test_version = "1.2.0"

    ext.target_version = 33
    ext.min_version = 18

    def version = System.getenv("VERSION")
    def code = System.getenv("VERSION_CODE")
    def artifactory_user = project.hasProperty('lovoo.repo.username') ? project.property('lovoo.repo.username') : System.getenv("ARTIFACTORY_USER")
    def artifactory_pwd = project.hasProperty('lovoo.repo.password') ? project.property('lovoo.repo.password') : System.getenv("ARTIFACTORY_PWD")
    ext.version_name = version == null ? "1.7.0-SNAPSHOT" : version
    ext.version_code = code == null ? 10 : code.toInteger()
    ext.repository_name = version_name.endsWith("-SNAPSHOT") ? "libs-snapshot" : "libs-release"
    ext.artifactory_user = artifactory_user
    ext.artifactory_pwd = artifactory_pwd

    repositories {
        google()
        jcenter()
        maven {
            url 'https://lovoo.jfrog.io/artifactory/libs-snapshot'
            credentials {
                username artifactory_user
                password artifactory_pwd
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.18'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.27.1'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.21.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'

    setGroup('com.github.lovoo.android.pickpic')
    setVersion(version_name)

    repositories {
        google()
        jcenter()
        maven {
            url 'https://lovoo.jfrog.io/artifactory/libs-snapshot'
            credentials {
                username artifactory_user
                password artifactory_pwd
            }
            content {
                includeGroupByRegex "com\\.github\\.lovoo\\.android\\.pick.*"
            }
        }
    }

    tasks.withType(Javadoc).all {
        enabled = false
    }
}

gradle.projectsEvaluated {
    subprojects {
        preBuild.dependsOn spotlessApply
    }
}

project('pickcore') {
    apply from: '../documentation.gradle'
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            aar(MavenPublication) {
                groupId = group
                artifactId = project.getName()
                version = version_name
                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }
}

project('pickui') {
    apply from: '../documentation.gradle'
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            aar(MavenPublication) {
                groupId = group
                artifactId = project.getName()
                version = version_name
                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }
}

project('pickcam') {
    apply from: '../documentation.gradle'
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            aar(MavenPublication) {
                groupId = group
                artifactId = project.getName()
                version = version_name
                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }
}

project('pickfacebook') {
    apply from: '../documentation.gradle'
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            aar(MavenPublication) {
                groupId = group
                artifactId = project.getName()
                version = version_name
                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }
}

project('pickapp') {
    apply from: '../documentation.gradle'
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            aar(MavenPublication) {
                groupId = group
                artifactId = project.getName()
                version = version_name
                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }
}

artifactory {
    clientConfig.setIncludeEnvVars(false)
    contextUrl = 'https://lovoo.jfrog.io/artifactory'
    publish {
        repository {
            repoKey = ext.repository_name // The Artifactory repository key to publish to
            username = ext.artifactory_user
            password = ext.artifactory_pwd
            maven = true
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishArtifacts = true
            publishPom = true // Publish generated POM files to Artifactory (true by default)
            publishIvy = false   //Publish generated Ivy descriptor files to Artifactory (true by default).
        }
    }
    resolve {
        repository {
            repoKey = ext.repository_name // The Artifactory repository key to publish to
            username = ext.artifactory_user
            password = ext.artifactory_pwd
            maven = true
        }
    }
}